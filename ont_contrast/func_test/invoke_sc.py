from ontology.ont_sdk import OntologySdk
from unittest import TestCase
from ontology.account.account import Address, Account
from ontology.smart_contract.neo_contract.abi.abi_info import AbiInfo

import json
import time
from collections import namedtuple


rpc_addr = 'http://polaris3.ont.io:20336'
sdk = OntologySdk()
sdk.set_rpc(rpc_addr)
sdk.open_wallet('/Users/zou/PycharmProjects/ont_test/ont_contrast/demo/cli/wallet.json')


class InvokeTest(TestCase):
    """
    用来测试一些简单合约的功能，包含checkwitness、notify等
    """
    def test_checkwitness(self):
        """
        测试CheckWitness功能以及使用方法
        :return:
        """
        code = '59c56b6a00527ac46a51527ac400681553797374656d2e52756e74696d652e4e6f74696679616a00c305636865636b9c64270051681553797374656d2e52756e74696d652e4e6f74696679616a51c300c3650b006c756661006c756657c56b6a00527ac46a00c3681b53797374656d2e52756e74696d652e436865636b5769746e65737361641c0052681553797374656d2e52756e74696d652e4e6f74696679616153681553797374656d2e52756e74696d652e4e6f7469667961006c7566'
        addr = Address.address_from_vm_code(code)

        abi = '{"functions":[{"name":"Main","parameters":[{"name":"op","type":""},{"name":"args","type":""}],"returntype":""},{"name":"check","parameters":[{"name":"acc","type":""}],"returntype":""}]}'
        abi = json.loads(abi, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))
        abi_info = AbiInfo('0x' + addr.to_reverse_hex_str(), 'Main', abi.functions, [])

        acc = sdk.get_wallet_manager().get_account('ANH5bHrrt111XwNEnuPZj6u95Dd6u7G4D6', '1')
        acc1 = sdk.get_wallet_manager().get_account('AazEvfQPcQ2GEFFPLF1ZLwQ7K5jDn81hve', '060708')
        func = abi_info.get_function('check')
        func.set_params_value(acc1.get_address().to_byte_array())

        res = sdk.neo_vm().send_transaction(addr.to_byte_array(), acc, acc, 200000000, 500, func, False)

        json_res = sdk.get_rpc().get_smart_contract_event_by_tx_hash(res)
        while json_res is None:
            json_res = sdk.get_rpc().get_smart_contract_event_by_tx_hash(res)
            time.sleep(1)
        print(json_res)
        print(res)

    def test_native_invoke(self):
        """
        测试向合约打钱和从合约打钱给账户，使用以及功能
        :return:
        """
        code = '59c56b6a00527ac46a51527ac46a00c305746f5f73639c640e006a51c300c3655a016c7566616a00c306746f5f6163639c640e006a51c300c3650b006c756661006c75665dc56b6a00527ac4682d53797374656d2e457865637574696f6e456e67696e652e476574457865637574696e6753637269707448617368616a51527ac41400000000000000000000000000000000000000016a52527ac46a51c36a00c35a53c176c96a53527ac4516a52c3087472616e736665726a53c351c176c9537951795572755172755279527954727552727568164f6e746f6c6f67792e4e61746976652e496e766f6b65616a54527ac46a54c3681553797374656d2e52756e74696d652e4e6f74696679616a54c36439006a54c301019c643000107472616e736665722073756363656564681553797374656d2e52756e74696d652e4e6f7469667961516c7566610f7472616e73666572206661696c6564681553797374656d2e52756e74696d652e4e6f7469667961006c7566006c75665ec56b6a00527ac4682d53797374656d2e457865637574696f6e456e67696e652e476574457865637574696e6753637269707448617368616a51527ac41400000000000000000000000000000000000000016a52527ac46a00c3681b53797374656d2e52756e74696d652e436865636b5769746e65737361630700006c7566616a00c36a51c35a53c176c96a53527ac4516a52c3087472616e736665726a53c351c176c9537951795572755172755279527954727552727568164f6e746f6c6f67792e4e61746976652e496e766f6b65616a54527ac46a54c36439006a54c301019c643000107472616e736665722073756363656564681553797374656d2e52756e74696d652e4e6f7469667961516c7566610f7472616e73666572206661696c6564681553797374656d2e52756e74696d652e4e6f7469667961006c7566006c7566'
        addr = Address.address_from_vm_code(code)

        abi = '{"functions":[{"name":"Main","parameters":[{"name":"op","type":""},{"name":"args","type":""}],"returntype":""},{"name":"to_sc","parameters":[{"name":"acc","type":""}],"returntype":""},{"name":"to_acc","parameters":[{"name":"acc","type":""}],"returntype":""}]}'
        abi = json.loads(abi, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))
        abi_info = AbiInfo('0x' + addr.to_reverse_hex_str(), 'Main', abi.functions, [])

        acc = sdk.get_wallet_manager().get_account('ANH5bHrrt111XwNEnuPZj6u95Dd6u7G4D6', '1')
        acc1 = sdk.get_wallet_manager().get_account('AazEvfQPcQ2GEFFPLF1ZLwQ7K5jDn81hve', '060708')
        func = abi_info.get_function('to_sc')
        func.set_params_value(acc.get_address().to_byte_array())

        res = sdk.neo_vm().send_transaction(addr.to_byte_array(), acc, acc, 200000000, 500, func, False)

        json_res = sdk.get_rpc().get_smart_contract_event_by_tx_hash(res)
        while json_res is None:
            json_res = sdk.get_rpc().get_smart_contract_event_by_tx_hash(res)
            time.sleep(1)
        print(json_res)
        print(res)

    def test_domain(self):
        """

        :return:
        """
        code = '012cc56b6a00527ac46a51527ac4682d53797374656d2e457865637574696f6e456e67696e652e476574457865637574696e6753637269707448617368616a52527ac46a00c30872656769737465729c647a006a51c300c36a53527ac46a51c351c36a54527ac46a53c3681b53797374656d2e52756e74696d652e436865636b5769746e657373616410006a53c36a54c37c65ac0b6c75666114436865636b5769746e657373206661696c656421681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a00c30473656c6c9c6488006a51c300c36a53527ac46a51c351c36a54527ac46a51c352c36a55527ac46a53c3681b53797374656d2e52756e74696d652e436865636b5769746e657373616414006a53c36a54c36a55c3527265bb096c75666114436865636b5769746e657373206661696c656421681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a00c30571756572799c6416006a51c300c36a54527ac46a54c365f2086c7566616a00c3036275799c6488006a51c300c36a53527ac46a51c351c36a54527ac46a51c352c36a55527ac46a53c3681b53797374656d2e52756e74696d652e436865636b5769746e657373616414006a53c36a54c36a55c352726571056c75666114436865636b5769746e657373206661696c656421681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a00c304646f6e659c647a006a51c300c36a53527ac46a51c351c36a54527ac46a53c3681b53797374656d2e52756e74696d652e436865636b5769746e657373616410006a53c36a54c37c65a6006c75666114436865636b5769746e657373206661696c656421681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a00c3087472616e736665729c6428006a51c300c36a56527ac46a51c351c36a57527ac46a56c36a52c36a57c35272651f036c7566611a4e6f74206120737570706f72746564206f7065726174696f6e21681553797374656d2e52756e74696d652e4e6f7469667961516c7566011cc56b6a00527ac46a51527ac4681953797374656d2e53746f726167652e476574436f6e74657874616a52527ac4682d53797374656d2e457865637574696f6e456e67696e652e476574457865637574696e6753637269707448617368616a53527ac41400000000000000000000000000000000000000016a54527ac46a52c36a51c37c681253797374656d2e53746f726167652e476574616a55527ac46a55c36a53c39e642b000b6e6f7420696e2073656c6c681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a52c30f4f726967696e616c5f4f776e65725f6a51c37e7c681253797374656d2e53746f726167652e476574616a56527ac46a56c36a00c39e642900096e6f74206f776e6572681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a52c30650726963655f6a51c37e7c681253797374656d2e53746f726167652e476574616a57527ac46a53c36a00c36a57c353c176c96a58527ac4516a54c3087472616e736665726a58c351c176c9537951795572755172755279527954727552727568164f6e746f6c6f67792e4e61746976652e496e766f6b65616a59527ac46a59c364f7006a59c301019c64ee006a52c30354505f6a51c37e7c681253797374656d2e53746f726167652e476574616a5a527ac46a52c36a51c36a5ac35272681253797374656d2e53746f726167652e507574616a52c30354505f6a51c37e7c681553797374656d2e53746f726167652e44656c657465616a52c30650726963655f6a51c37e7c681553797374656d2e53746f726167652e44656c657465616a52c30f4f726967696e616c5f4f776e65725f6a51c37e7c681553797374656d2e53746f726167652e44656c657465610d646f6e65207375636365656421681553797374656d2e52756e74696d652e4e6f7469667961516c7566610f7472616e73666572206661696c6564681553797374656d2e52756e74696d652e4e6f7469667961006c7566006c75660111c56b6a00527ac46a51527ac46a52527ac41400000000000000000000000000000000000000016a53527ac46a00c3681b53797374656d2e52756e74696d652e436865636b5769746e6573736164e2006a00c36a51c36a52c353c176c96a54527ac4516a53c3087472616e736665726a54c351c176c9537951795572755172755279527954727552727568164f6e746f6c6f67792e4e61746976652e496e766f6b65616a55527ac46a55c3681553797374656d2e52756e74696d652e4e6f74696679616a55c36439006a55c301019c643000107472616e736665722073756363656564681553797374656d2e52756e74696d652e4e6f7469667961516c7566610f7472616e73666572206661696c6564681553797374656d2e52756e74696d652e4e6f7469667961006c75666234006113636865636b5769746e657373206661696c6564681553797374656d2e52756e74696d652e4e6f7469667961006c756661006c75660123c56b6a00527ac46a51527ac46a52527ac4681953797374656d2e53746f726167652e476574436f6e74657874616a53527ac4682d53797374656d2e457865637574696f6e456e67696e652e476574457865637574696e6753637269707448617368616a54527ac46a53c36a51c37c681253797374656d2e53746f726167652e476574616a55527ac46a55c36a54c39e6430001075726c206e6f7420696e2073616c6521681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a53c30354505f6a51c37e7c681253797374656d2e53746f726167652e476574616a56527ac46a53c30650726963655f6a51c37e7c681253797374656d2e53746f726167652e476574616a57527ac46a56c3630b016a52c36a57c3a264c2006a00c36a54c36a52c35272656efd6484006a53c30354505f6a51c37e6a00c35272681253797374656d2e53746f726167652e507574616a52c36a57c3a0642b006a53c30650726963655f6a51c37e6a52c35272681253797374656d2e53746f726167652e50757461610c627579207375636365656421681553797374656d2e52756e74696d652e4e6f7469667961516c7566610f5472616e73666572204661696c6564681553797374656d2e52756e74696d652e4e6f7469667961006c756661215072696365206973206c6f776572207468616e2063757272656e74207072696365681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a52c36a57c3a1644100215072696365206973206c6f776572207468616e2063757272656e74207072696365681553797374656d2e52756e74696d652e4e6f7469667961006c7566616a54c36a00c36a57c352726526fc647c006a53c30354505f6a51c37e6a00c35272681253797374656d2e53746f726167652e507574616a53c30650726963655f6a51c37e6a52c35272681253797374656d2e53746f726167652e507574610f726566756e64207375636365656421681553797374656d2e52756e74696d652e4e6f7469667961516c7566610d726566756e64206661696c6564681553797374656d2e52756e74696d652e4e6f7469667961006c7566006c756657c56b6a00527ac4681953797374656d2e53746f726167652e476574436f6e74657874616a51527ac46a51c36a00c37c681253797374656d2e53746f726167652e476574616a52527ac4096f776e6572206973206a52c37e681553797374656d2e52756e74696d652e4e6f74696679616a52c36c756660c56b6a00527ac46a51527ac46a52527ac4681953797374656d2e53746f726167652e476574436f6e74657874616a53527ac4682d53797374656d2e457865637574696f6e456e67696e652e476574457865637574696e6753637269707448617368616a54527ac46a53c36a51c37c681253797374656d2e53746f726167652e476574616a55527ac46a55c36a00c39c64a6006a53c30f4f726967696e616c5f4f776e65725f6a51c37e6a00c35272681253797374656d2e53746f726167652e507574616a53c30650726963655f6a51c37e6a52c35272681253797374656d2e53746f726167652e507574616a53c36a51c36a54c35272681253797374656d2e53746f726167652e507574610d73656c6c207375636365656421681553797374656d2e52756e74696d652e4e6f7469667961516c7566610b4e6f742061206f776e6572681553797374656d2e52756e74696d652e4e6f7469667961006c75665bc56b6a00527ac46a51527ac4681953797374656d2e53746f726167652e476574436f6e74657874616a52527ac46a52c36a51c37c681253797374656d2e53746f726167652e476574616351006a52c36a51c36a00c35272681253797374656d2e53746f726167652e50757461117265676973746572207375636365656421681553797374656d2e52756e74696d652e4e6f7469667961516c75666113616c7265616479207265676973746572656421681553797374656d2e52756e74696d652e4e6f7469667961006c75665ec56b6a00527ac46a51527ac46a51c36a00c3946a52527ac46a52c3c56a53527ac4006a54527ac46a00c36a55527ac461616a00c36a51c39f6433006a54c36a55c3936a56527ac46a56c36a53c36a54c37bc46a54c351936a54527ac46a55c36a54c3936a00527ac462c8ff6161616a53c36c7566'
        addr = Address.address_from_vm_code(code)

        abi = '{"functions":[{"name":"Main","parameters":[{"name":"operation","type":""},{"name":"args","type":""}],"returntype":""},{"name":"register","parameters":[{"name":"account","type":""},{"name":"domain","type":""}],"returntype":""},{"name":"sell","parameters":[{"name":"account","type":""},{"name":"url","type":""},{"name":"price","type":""}],"returntype":""},{"name":"query","parameters":[{"name":"url","type":""}],"returntype":""},{"name":"buy","parameters":[{"name":"acct","type":""},{"name":"url","type":""},{"name":"price","type":""}],"returntype":""},{"name":"transferONT","parameters":[{"name":"fromacct","type":""},{"name":"toacct","type":""},{"name":"amount","type":""}],"returntype":""},{"name":"done","parameters":[{"name":"acct","type":""},{"name":"url","type":""}],"returntype":""}]}'
        abi = json.loads(abi, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))
        abi_info = AbiInfo('0x' + addr.to_reverse_hex_str(), 'Main', abi.functions, [])

        acc = sdk.get_wallet_manager().get_account('ANH5bHrrt111XwNEnuPZj6u95Dd6u7G4D6', '1')
        acc1 = sdk.get_wallet_manager().get_account('AazEvfQPcQ2GEFFPLF1ZLwQ7K5jDn81hve', '060708')
        func = abi_info.get_function('buy')
        func.set_params_value(acc1.get_address().to_byte_array(), 'zou', 2)

        res = sdk.neo_vm().send_transaction(addr.to_byte_array(), acc1, acc1, 200000000, 500, func, False)

        json_res = sdk.get_rpc().get_smart_contract_event_by_tx_hash(res)
        while json_res is None:
            json_res = sdk.get_rpc().get_smart_contract_event_by_tx_hash(res)
            time.sleep(1)
        print(json_res)
        print(res)

    def test_no_param(self):
        code = '57c56b6a00527ac46a51527ac46a00c304746573749c640900650b006c756661006c756653c56b06726573756c746c7566'
        addr = Address.address_from_vm_code(code)

        abi = '{"functions":[{"name":"Main","parameters":[{"name":"op","type":""},{"name":"args","type":""}],"returntype":""},{"name":"test","parameters":[{"name":"","type":""}],"returntype":""}]}'
        abi = json.loads(abi, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))
        abi_info = AbiInfo('0x' + addr.to_reverse_hex_str(), 'Main', abi.functions, [])

        acc = sdk.get_wallet_manager().get_account('ANH5bHrrt111XwNEnuPZj6u95Dd6u7G4D6', '1')
        func = abi_info.get_function('test')
        func.set_params_value()

        res = sdk.neo_vm().send_transaction(addr.to_byte_array(), acc, acc, 200000000, 500, func, True)
        print(bytes.fromhex(res).decode())

    def test_input_list(self):
        code = '57c56b6a00527ac46a51527ac46a00c304746573749c64270000681553797374656d2e52756e74696d652e4e6f74696679616a51c300c3650b006c756661006c756658c56b6a00527ac451681553797374656d2e52756e74696d652e4e6f7469667961006a52527ac46a00c3c06a53527ac4616a52c36a53c39f6455006a00c36a52c3c36a51527ac46a52c351936a52527ac46a51c3c0539c681553797374656d2e52756e74696d652e4e6f74696679616a51c3681553797374656d2e52756e74696d652e4e6f746966796162a6ff616161516c7566'
        addr = Address.address_from_vm_code(code)

        abi = '{"functions":[{"name":"Main","parameters":[{"name":"op","type":""},{"name":"args","type":""}],"returntype":""},{"name":"test","parameters":[{"name":"arr","type":""}],"returntype":""}]}'
        abi = json.loads(abi, object_hook=lambda d: namedtuple('X', d.keys())(*d.values()))
        abi_info = AbiInfo('0x' + addr.to_reverse_hex_str(), 'Main', abi.functions, [])

        acc = sdk.get_wallet_manager().get_account('ANH5bHrrt111XwNEnuPZj6u95Dd6u7G4D6', '1')
        acc1 = sdk.get_wallet_manager().get_account('AazEvfQPcQ2GEFFPLF1ZLwQ7K5jDn81hve', '060708')
        func = abi_info.get_function('test')
        func.set_params_value([[acc.get_address().to_byte_array(), acc.get_address().to_byte_array(), 3],
                               [acc.get_address().to_byte_array(), acc.get_address().to_byte_array(), 1]])

        res = sdk.neo_vm().send_transaction(addr.to_byte_array(), acc1, acc1, 200000000, 500, func, False)

        json_res = sdk.get_rpc().get_smart_contract_event_by_tx_hash(res)
        while json_res is None:
            json_res = sdk.get_rpc().get_smart_contract_event_by_tx_hash(res)
            time.sleep(1)
        print(json_res)
        print(res)